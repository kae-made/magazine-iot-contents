// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 0.1.1
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------

namespace My.Gen.MeasurementInstrumentsEdge
{
    using System;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Runtime.Loader;
    using System.Security.Cryptography.X509Certificates;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using Kae.Utility.Logging;
    using Microsoft.Azure.Devices.Client;
    using Microsoft.Azure.Devices.Client.Transport.Mqtt;

    class Program
    {
        static int counter;

        static void Main(string[] args)
        {
            var logger = ConsoleLogger.CreateLogger();
            try
            {
                IoTApp iotApp = new IoTApp();
                iotApp.UserPreInitializeAsync().Wait();
                iotApp.InitializeAsync("iot-app-config.yaml", logger).Wait();
                logger.LogInfo("Initialized");
                iotApp.UserPostInitializeAsync().Wait();

                logger.LogInfo("Starting DoWork...");
                iotApp.DoWorkAsync().Wait();

                // Wait until the app unloads or is cancelled
                var cts = new CancellationTokenSource();
                AssemblyLoadContext.Default.Unloading += (ctx) => cts.Cancel();
                Console.CancelKeyPress += (sender, cpe) => cts.Cancel();
                WhenCancelled(cts.Token).Wait();

                iotApp.UserPreTerminateAsync().Wait();
                iotApp.TerminateAsync().Wait();
                iotApp.UserPostTerminateAsync().Wait();
            }
            catch (Exception ex)
            {
                logger.LogInfo(ex.ToString());
            }
        }

        /// <summary>
        /// Handles cleanup operations when app is cancelled or unloads
        /// </summary>
        public static Task WhenCancelled(CancellationToken cancellationToken)
        {
            var tcs = new TaskCompletionSource<bool>();
            cancellationToken.Register(s => ((TaskCompletionSource<bool>)s).SetResult(true), tcs);
            return tcs.Task;
        }
    }
}
